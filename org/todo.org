
* Issues

  :PROPERTIES:
  :status_ALL: open closed assigned inprogress
  :type_ALL: bug feature performance refactor
  :severity_ALL: mild medium high critical
  :END:

** Move the reasoner code into ontology options
   
   :PROPERTIES:
   :status:   open
   :severity: mild
   :type:     performance
   :END:
   

   
** IRI creation needs to be generalised.
   :PROPERTIES:
   :type:     feature
   :status:   open
   :severity: medium
   :END: 
   

Have a OBO style generator. 

Initially, generate an UUID style identifer for new terms. Can use memorise to
save and to store these in a file. Add a URI gen client which will search for
these, and replace them with newly minted URIs. Have to add a purl creation
client also, which will update all purls and make sure that they point to the
correct place. 


** Interpolation for comments
   :PROPERTIES:
   :type:     feature
   :severity: medium
   :END:

Would like to be able to interpolate comments and labels. Currently, we
have no default label (not ideal), although this could be created
automatically. 

However, would be good to be able to support interpolation in comments and
labels. So, in rdfs:comment, would be nice to be able to do

"{rdfs:label} is a class which is cool" 

and have {rdfs:label} interpolate. No idea how to get this to work --
problem is that we might not have set the label yet on the object, because we
go through a map stage (guess it's an array map).

Could hook into the owlclass-explicit function and add stuff at the end. 


** Clojure IDs as annotation
   :PROPERTIES:
   :type:     feature
   :severity: medium
   :END:

The identifiers used within clojure should be placed onto the ontology as
annotations. The idea here is that someone using clojure-owl to generate an
OWL file, should be able to read this OWL file in and recreate what they
started with (at least in terms of ids and so on). 


** Version ID
   :PROPERTIES:
   :type:     feature
   :severity: medium
   :END:

Support Version ID for everything.



** tawny.lookup optimisation
   :PROPERTIES:
   :type:     performance
   :status:   closed
   :END:

*** Issue

This is potentially very slow. Add a cache to hold the map. 
Put hooks into tawny.old macros for "new var creation". When this 
pings, just kill the cache and start again. 

Also, kill on ontology kill I think. 


*** Solution

Providing a generic cache is more of a pain than it appears, as it requires
hooks in everywhere, which potentially get called often. tawny.render was the
biggest sufferer from this, where I have fixed it by dynamically binding a
cache. 


** add :ontology frame to all things
   :PROPERTIES:
   :type:     feature
   :severity: mild
   :END:

We should be able to specify the ontology as a parameter, to 
all things that add to an ontology -- with-ontology is a bit unwieldy. 
Although we might want to use with-ontology to implement this, or I will have
to pass it around a lot. 

A new frame would be one option. Or the first parameter would be another. 


** Autoname
   :PROPERTIES:
   :type:     feature
   :severity: mild
   :END:

An autoname facility might be nice for where I can't be assed to specify a
name. Especially good for probe classes. Easiest way is to just implement a
new owlclass function. 




** reasoner monitor
   :PROPERTIES:
   :type:     bug
   :status:   closed
   :END:

*** Issue
Something isn't working and the progress monitor isn't always getting set. 

             (SimpleConfiguration.
              (*reasoner-progress-monitor*)))]

This *should* work. Using dynamic binding? Some laziness disaster? 

Think I should extent reasoner to take this explicitly. It balks tests
completely. 

*** Closed

The original issue was wrong, and this dynamic binding is working.


** Ontology reload
   :PROPERTIES:
   :type:     feature
   :END:

Now we have tawny.lookup, it *should* be possible to unmap all vars in a
namespace when an ontology is re-evaled. Just do "tawny.lookup", then ns-umap
the entire lot. 


** tawny doc
   :PROPERTIES:
   :type:     bug
   :END:

Doesn't cope well when the class isn't known as a var. Should fall back to 
http:// with special case for owl:thing. 



* Documentation 

** Getting started with-clojure [4/5]
 - [X] Complete leiningen project file
 - [X] Namespaces, how they relate to files
 - [X] How to evaluate a file
 - [X] How to write a main method which dumps OWL files
 - [ ] How to use Clojars.

** Getting started [/]
 - [ ] Namespace and tawny OWL imports
 - [ ] Relationship between ontology and namespace
 - [ ] Creating a new ontology
 - [ ] Creating a new class
 - [ ] Creating properties
 - [ ] Removing classes again
 - [ ] Saving ontologies
 - [ ] Interaction with Protege

** Reasoning [/]
 - [ ] What is reasoning
 - [ ] Reasoning over a single ontology
 - [ ] Reasoning predicates
 - [ ] Reasoning with tawny-mode

** Importing and Reading external ontologies [0/5]
 - [ ] Difference between clojure import and OWL import.
 - [ ] Reading an OWL file into Clojure
 - [ ] What it means, in terms of Clojure
 - [ ] transform and filter
 - [ ] Filter is only in namespace, not save

** Tawny Repl [/]
 - [ ] Documentation lookup

** Scripting with Tawny [/]
 - [ ] Added NamedPizza's

** Polyglot
 - [ ] Adding multi lingual labels

** Memorise
 - [ ] What is the problem with read and transform
 - [ ] How memorise helps to solve this problem
 - [ ] How to save a memorisation state
 - [ ] How to load one again.

** Testing
 - [ ] What is unit testing, how does it look in Clojure
 - [ ] How does unit testing apply to ontologies
 - [ ] Predicates for use without reasoning
 - [ ] How to set up reasoner in a fixture
 - [ ] Predicates for use with reasoning
 - [ ] probe-classes. 
