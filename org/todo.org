

* Issues
  
  :PROPERTIES:
  :status_ALL: open closed assigned inprogress
  :type_ALL: bug feature performance refactor
  :severity_ALL: mild medium high critical
  :scheduled_release_ALL: 0.12 1.0 1.1
  :END:

** let-ontology

A macro for easing

(let [ont (ontology)
      cl (owl-class ont)
      cl2 (owl-class ont)]
   (coherent? ont))

style code -- want instead

(let-ont [ont (ontology)
          cl (owl-class)
          cl2 (owl-class)])



Possible expansions:

(let [ont (ontology)]
  (with-current-ontology
     (let [cl (owl-class)
           cl2 (owl-class)])))

This is nice and simple, but uses dynamic scoping of the current ontology
which is a bit unpredicatable if we call anything else. 

Another possibility is to expand to the form above, but simply adding "ont"
as the first value. But this fails for 

(let-ont [ont (ontology)
          cl (if condition
                 (owl-class "a")
                 (owl-class "b"))]
     (consistent?))

cause the if form would end up as 

(if ont condition
   (owl-class "a")
   (owl-class "b"))

which is not ideal. Another possibility would be to check for tawny functions
using clojure.walk. Okay, but fails if we define things like (sio-class).
      


** Relative paths

Second notes -- this actually fails. The problem is that the :file metadata
is, itself, often relative -- for example within leiningen.

I think that I need to move to loading via resources (this will work cleanly
with protege). Writing is harder -- we have the ability to specify a relative
location, but only to save if a) it exists and b) it's writable. Otherwise,
OBO style ontologies will try and write the jar packaged. Not good.


Tawny uses relative paths at several places -- obo-restore-iri for example. 
This is a pain in the ass because it fails when using protege-nrepl, which
has a root dir defined by protege. It would also fail if I loaded two
projects into Protege at once.

Solution -- use paths relative to the source directory.

So:

(tawny.obo/obo-restore-iri "./src/tawny/obo/pizza/pizza_iri.edn")

would become 

(tawny.obo/obo-restore-iri (path-dir pizzaontology) "pizza.edn")

like wise

(tawny.obo/obo-store-iri (path-dir pizzaontology) "pizza_iri.edn")


path-dir is a macro which gets the location of the file in which
pizzaontology is defined -- any symbol would actually work here. We could
even be disasterous and do 

(path-dir)

and have path-dir define it's own symbol, but that's too evil.


** Comment spaces

comment functions should remove new lines and indents so that Clojure new
lines don't appear in OWL


** Write OBO generator docs

Ah, yes, stuff about how to do OBO style IDs


** Memorise lookup unnecessary

During load, we change IRIs to vars, but only use the var in one place, and
only where we have obsolete mappings. Not sure this makes sense.


** Ontology options

This exposes too much implementation detail, I think. Should probably use a
atom rather than a ref (since changes are never synchronised with anything
else). 


** Interpolation for comments
   :PROPERTIES:
   :type:     feature
   :severity: medium
   :status:   open
   :scheduled_release:  1.1
   :END:

Would like to be able to interpolate comments and labels. Currently, we
have no default label (not ideal), although this could be created
automatically. 

However, would be good to be able to support interpolation in comments and
labels. So, in rdfs:comment, would be nice to be able to do

"{rdfs:label} is a class which is cool" 

and have {rdfs:label} interpolate. No idea how to get this to work --
problem is that we might not have set the label yet on the object, because we
go through a map stage (guess it's an array map).

Could hook into the owlclass-explicit function and add stuff at the end. 


** Version ID
   :PROPERTIES:
   :type:     feature
   :severity: medium
   :END:

Support Version ID for everything.



** Ontology reload
   :PROPERTIES:
   :type:     feature
   :END:

Now we have tawny.lookup, it *should* be possible to unmap all vars in a
namespace when an ontology is re-evaled. Just do "tawny.lookup", then ns-umap
the entire lot. 


