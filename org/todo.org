
* Before Release

- [ ] Finish Regularisation
- [ ] fact,fact-not to is and (owl)not
- [ ] Eastwood with no errors?


* Issues
  
  :PROPERTIES:
  :status_ALL: open closed assigned inprogress
  :type_ALL: bug feature performance refactor
  :severity_ALL: mild medium high critical
  :scheduled_release_ALL: 0.12 1.0 1.1
  :END:

** let-ontology

A macro for easing

(let [ont (ontology)
      cl (owl-class ont)
      cl2 (owl-class ont)]
   (coherent? ont))

style code -- want instead

(let-ont [ont (ontology)
          cl (owl-class)
          cl2 (owl-class)])



Possible expansions:

(let [ont (ontology)]
  (with-current-ontology
     (let [cl (owl-class)
           cl2 (owl-class)])))

This is nice and simple, but uses dynamic scoping of the current ontology
which is a bit unpredicatable if we call anything else. 

Another possibility is to expand to the form above, but simply adding "ont"
as the first value. But this fails for 

(let-ont [ont (ontology)
          cl (if condition
                 (owl-class "a")
                 (owl-class "b"))]
     (consistent?))

cause the if form would end up as 

(if ont condition
   (owl-class "a")
   (owl-class "b"))

which is not ideal. Another possibility would be to check for tawny functions
using clojure.walk. Okay, but fails if we define things like (sio-class).
      


** Relative paths

Second notes -- this actually fails. The problem is that the :file metadata
is, itself, often relative -- for example within leiningen.

I think that I need to move to loading via resources (this will work cleanly
with protege). Writing is harder -- we have the ability to specify a relative
location, but only to save if a) it exists and b) it's writable. Otherwise,
OBO style ontologies will try and write the jar packaged. Not good.


Tawny uses relative paths at several places -- obo-restore-iri for example. 
This is a pain in the ass because it fails when using protege-nrepl, which
has a root dir defined by protege. It would also fail if I loaded two
projects into Protege at once.

Solution -- use paths relative to the source directory.

So:

(tawny.obo/obo-restore-iri "./src/tawny/obo/pizza/pizza_iri.edn")

would become 

(tawny.obo/obo-restore-iri (path-dir pizzaontology) "pizza.edn")

like wise

(tawny.obo/obo-store-iri (path-dir pizzaontology) "pizza_iri.edn")


path-dir is a macro which gets the location of the file in which
pizzaontology is defined -- any symbol would actually work here. We could
even be disasterous and do 

(path-dir)

and have path-dir define it's own symbol, but that's too evil.


** Comment spaces

comment functions should remove new lines and indents so that Clojure new
lines don't appear in OWL


** Write OBO generator docs

Ah, yes, stuff about how to do OBO style IDs


** Memorise lookup unnecessary

During load, we change IRIs to vars, but only use the var in one place, and
only where we have obsolete mappings. Not sure this makes sense.


** Memorise read rather than load

Currently implemented using load -- this forces byte compilation of the saved
file. This imposes file size limits due to the java class format. Probably
not good.

Can use clojure.edn which just returns data instead.


** Ontology options

This exposes too much implementation detail, I think. Should probably use a
atom rather than a ref (since changes are never synchronised with anything
else). 


** Memorise, obo

Move to defontfn footing, and add some documentation!


** Privacy

consider "add" methods 



** Interpolation for comments
   :PROPERTIES:
   :type:     feature
   :severity: medium
   :status:   open
   :scheduled_release:  1.1
   :END:

Would like to be able to interpolate comments and labels. Currently, we
have no default label (not ideal), although this could be created
automatically. 

However, would be good to be able to support interpolation in comments and
labels. So, in rdfs:comment, would be nice to be able to do

"{rdfs:label} is a class which is cool" 

and have {rdfs:label} interpolate. No idea how to get this to work --
problem is that we might not have set the label yet on the object, because we
go through a map stage (guess it's an array map).

Could hook into the owlclass-explicit function and add stuff at the end. 


** Version ID
   :PROPERTIES:
   :type:     feature
   :severity: medium
   :END:

Support Version ID for everything.



** Ontology reload
   :PROPERTIES:
   :type:     feature
   :END:

Now we have tawny.lookup, it *should* be possible to unmap all vars in a
namespace when an ontology is re-evaled. Just do "tawny.lookup", then ns-umap
the entire lot. 


* Documentation 

** Getting started with-clojure [5/5]
 - [X] Complete leiningen project file
 - [X] Namespaces, how they relate to files
 - [X] How to evaluate a file
 - [X] How to write a main method which dumps OWL files
 - [X] How to use Clojars.

** Getting started [9/9]

 - [X] Namespace and tawny OWL imports
 - [X] Relationship between ontology and namespace
 - [X] Creating a new ontology
 - [X] Creating a new class
 - [X] Creating properties
 - [X] as-subclasses, as-disjoints macrs
 - [X] Removing classes again
 - [X] Saving ontologies
 - [X] Interaction with Protege

** Adding restrictions [5/5]
 - [X] Adding superclasses, equivalents
 - [X] Building some,only
 - [X] And, or, not
 - [X] Forward declaration with declare-classes
 - [X] String based use of Tawny.

** Name Clashes [1/1]

 - [X] A seperate document describing what to do about these. 

** Querying the Ontology [2/2]
 - [X] Programmatically interacting with the ontology
 - [X] Not asserted and reasoned

** Reasoning [4/4]
 - [X] What is reasoning
 - [X] Reasoning over a single ontology
 - [X] Reasoning predicates
 - [X] Reasoning with tawny-mode

** Importing and Reading external ontologies [5/5]
 - [X] Difference between clojure import and OWL import.
 - [X] Reading an OWL file into Clojure
 - [X] What it means, in terms of Clojure
 - [X] transform and filter
 - [X] Filter is only in namespace, not save

** Tawny Repl [1/1]
 - [X] Documentation lookup
 - [ ] Why documentation lookup is slow

** Scripting with Tawny [1/1]
 - [X] Added NamedPizza's

** Polyglot [1/1]
 - [X] Adding multi lingual labels
   
** Memorise [/]
 - [ ] What is the problem with read and transform
 - [ ] How memorise helps to solve this problem
 - [ ] How to save a memorisation state
 - [ ] How to load one again.

** Render [/]
 - [ ] What render is for
 - [ ] How render is not necessary for reading
 - [ ] How render is used for documentation
 - [ ] And testing

** Testing [6/6]
 - [X] What is unit testing, how does it look in Clojure
 - [X] How does unit testing apply to ontologies
 - [X] Predicates for use without reasoning
 - [X] How to set up reasoner in a fixture
 - [X] Predicates for use with reasoning
 - [X] probe-classes. 
