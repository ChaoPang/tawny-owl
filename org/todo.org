

* Issues
  
  :PROPERTIES:
  :status_ALL: open closed assigned inprogress
  :type_ALL: bug feature performance refactor
  :severity_ALL: mild medium high critical
  :scheduled_release_ALL: 0.12 1.0 1.1
  :END:

** add-annotation

Doesn't broadcast, and probably should!

** Privacy

consider "add" methods 



** Should be able to pass multiple comments or labels
   :PROPERTIES:
   :type:     bug
   :status:   open
   :severity: mild
   :scheduled_release: 1.0
   :END:
   

      (when comment
        (add-annotation o class
                        (list (owlcomment
                               (first comment)))))

    doesn't make sense.


** Move the reasoner code into ontology options
   
   :PROPERTIES:
   :status:   open
   :severity: mild
   :type:     performance
   :END:
   

   
** Interpolation for comments
   :PROPERTIES:
   :type:     feature
   :severity: medium
   :status:   open
   :scheduled_release:  1.1
   :END:

Would like to be able to interpolate comments and labels. Currently, we
have no default label (not ideal), although this could be created
automatically. 

However, would be good to be able to support interpolation in comments and
labels. So, in rdfs:comment, would be nice to be able to do

"{rdfs:label} is a class which is cool" 

and have {rdfs:label} interpolate. No idea how to get this to work --
problem is that we might not have set the label yet on the object, because we
go through a map stage (guess it's an array map).

Could hook into the owlclass-explicit function and add stuff at the end. 


** Version ID
   :PROPERTIES:
   :type:     feature
   :severity: medium
   :END:

Support Version ID for everything.



** Autoname
   :PROPERTIES:
   :type:     feature
   :severity: mild
   :END:

An autoname facility might be nice for where I can't be assed to specify a
name. Especially good for probe classes. Easiest way is to just implement a
new owlclass function. 


** Ontology reload
   :PROPERTIES:
   :type:     feature
   :END:

Now we have tawny.lookup, it *should* be possible to unmap all vars in a
namespace when an ontology is re-evaled. Just do "tawny.lookup", then ns-umap
the entire lot. 


* Documentation 

** Getting started with-clojure [5/5]
 - [X] Complete leiningen project file
 - [X] Namespaces, how they relate to files
 - [X] How to evaluate a file
 - [X] How to write a main method which dumps OWL files
 - [X] How to use Clojars.

** Getting started [9/9]

 - [X] Namespace and tawny OWL imports
 - [X] Relationship between ontology and namespace
 - [X] Creating a new ontology
 - [X] Creating a new class
 - [X] Creating properties
 - [X] as-subclasses, as-disjoints macrs
 - [X] Removing classes again
 - [X] Saving ontologies
 - [X] Interaction with Protege

** Adding restrictions [5/5]
 - [X] Adding superclasses, equivalents
 - [X] Building some,only
 - [X] And, or, not
 - [X] Forward declaration with declare-classes
 - [X] String based use of Tawny.

** Name Clashes [1/1]

 - [X] A seperate document describing what to do about these. 

** Querying the Ontology [2/2]
 - [X] Programmatically interacting with the ontology
 - [X] Not asserted and reasoned

** Reasoning [4/4]
 - [X] What is reasoning
 - [X] Reasoning over a single ontology
 - [X] Reasoning predicates
 - [X] Reasoning with tawny-mode

** Importing and Reading external ontologies [5/5]
 - [X] Difference between clojure import and OWL import.
 - [X] Reading an OWL file into Clojure
 - [X] What it means, in terms of Clojure
 - [X] transform and filter
 - [X] Filter is only in namespace, not save

** Tawny Repl [1/1]
 - [X] Documentation lookup

** Scripting with Tawny [1/1]
 - [X] Added NamedPizza's

** Polyglot [1/1]
 - [X] Adding multi lingual labels
   
** Memorise [/]
 - [ ] What is the problem with read and transform
 - [ ] How memorise helps to solve this problem
 - [ ] How to save a memorisation state
 - [ ] How to load one again.

** Testing [6/6]
 - [X] What is unit testing, how does it look in Clojure
 - [X] How does unit testing apply to ontologies
 - [X] Predicates for use without reasoning
 - [X] How to set up reasoner in a fixture
 - [X] Predicates for use with reasoning
 - [X] probe-classes. 
