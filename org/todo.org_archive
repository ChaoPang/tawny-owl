#    -*- mode: org -*-


Archived entries from file /home/phillord/src/knowledge/tawny-owl/src/tawny/todo.org



* Name change
  :PROPERTIES:
  :ARCHIVE_TIME: 2012-12-30 Sun 09:13
  :ARCHIVE_FILE: ~/src/knowledge/tawny-owl/src/tawny/todo.org
  :ARCHIVE_CATEGORY: todo
  :END:

Move the entire library to a new name "tawny owl". 

* Memorise/Remember
  :PROPERTIES:
  :ARCHIVE_TIME: 2013-01-08 Tue 17:05
  :ARCHIVE_FILE: ~/src/knowledge/tawny-owl/src/tawny/todo.org
  :ARCHIVE_CATEGORY: todo
  :END:

I need some functionality for remebering the mapping between IRIs and clojure
identifiers, so that if the meaningful names

(memorise)

save the current IRI to identifier mapping (including old mappings already
loaded), into a file based on the current namespace


(remember)

Load IRI mappings from a file save by memorise. This should check for IRIs
which have changed their mappings. What happens to old mapping should depend
on a dynamically bound variable. It should emit a warning at minimum, and bind
the old mapping as alias, or bind the old mapping as an alias which will crash
when used (with some suitable warning), or not bind it, in which case the
compiler will pick up any usage (but without nice warnings). 

See here -- which might be a nicer way to do the alias. Alias might want to
come in another package, as I think I might want to use this else where. 

https://github.com/technomancy/leiningen/blob/1.x/src/leiningen/core.clj#L13

* owlsome
  :PROPERTIES:
  :ARCHIVE_TIME: 2013-01-08 Tue 17:06
  :ARCHIVE_FILE: ~/src/knowledge/tawny-owl/src/tawny/todo.org
  :ARCHIVE_OLPATH: Bugs
  :ARCHIVE_CATEGORY: todo
  :END:

(owlsome hasPart)

doesn't crash -- not good -- should have arity of at least 2



* Remove the Ontology Record and use java object
  :PROPERTIES:
  :ARCHIVE_TIME: 2013-01-25 Fri 19:16
  :ARCHIVE_FILE: ~/src/knowledge/tawny-owl/src/tawny/todo.org
  :ARCHIVE_CATEGORY: todo
  :END:

The existance of an Ontology record with an ontology inside it 
is a pain in the ass for many reasons -- mostly because I have to remember the
layer of indirection. So I want to get away from this and just use the
underlying Java object

** Get prefix from ontology

(.isPrefixOWLOntologyFormat
 (.getOntologyFormat owl-ontology-manager (#'get-current-jontology)))

returns true -- so by default, we should be able to get the format. Then

public java.util.Map<java.lang.String,java.lang.String> getPrefixName2PrefixMap()

Description copied from interface: PrefixManager
Gets a map that maps prefix names to prefixes.

should let us get the prefix name (that is owl:) for prefix (that is url). The
map is backward, but such is life. 

Setting prefix is easy -- save-ontology has the code. 

** IRI

Easy to get -- from the ontology ID object which comes direct from the
Ontology object.

** Options 

Just put these damn options in! Ah well. 

Currently only used by memorise to store remembered entities. This can be 
replaced by a map, with appropriate hooks. Currently, I have this for
reasoner. This should be easy to generalise -- map from ontology to another
map. Second map can use namespaced keywords, and we can put anything we want
into it. 

Perhaps, can use this for lookup cache also. 

Maybe, a better idea here is to use the IMeta interface and extends-type
support to add metadata to ontologies. This doesn't work for the reasoner
however, as I need to be able to blitz all the reasoners when the factory
changes (which doesn't affect ontologies). 

Lookup cache is namespace based. I guess I could add this to the namespace
metadata? Although, why not the ontology? Can get the ontology from the
namespace after all. 


So, final decision. Will create a (options ontology) method in owl.clj, which
returns a hash for each and an (update-options f ontology) which applies
function f which updates. We store this in a ref. Then we hook into ontology
creation/destruction code, so that we can clear things up appropriately.

This means that ontologies have to be removed explicitly; but then they do
anyway because the ontology manager holds onto them. So only a problem if
ontologies are created with random IRIs. 

Reasoner can also be updated. This will make the task of getting all reasoners
a little harder -- we iterate through all options, get the reasoner, kill it.
But, we can do this one after the other. 


* Annotation Problems
  :PROPERTIES:
  :ARCHIVE_TIME: 2013-01-25 Fri 19:17
  :ARCHIVE_FILE: ~/src/knowledge/tawny-owl/src/tawny/todo.org
  :ARCHIVE_CATEGORY: todo
  :END:

 - [] create new add-a-annotation method which adds a single annotation.
 - [] Change add-annotation to use it.
 - [] Change add-a-annotation to multimethod keyed on class of first entity.
 - [] Add OWLNamedEntity should pass directly, rather than conversion of IRI.
 - [] Add support for OWLOntology -- need different AddOntologyAnnotation
      which we will only use in this place. 

* Ugly error when the reasoner factory has not been set.
  :PROPERTIES:
  :ARCHIVE_TIME: 2013-02-12 Tue 23:20
  :ARCHIVE_FILE: ~/src/knowledge/tawny-owl/src/tawny/todo.org
  :ARCHIVE_OLPATH: Bugs
  :ARCHIVE_CATEGORY: todo
  :END: 
java.lang.IllegalArgumentException: No matching method found: createNonBufferingReasoner for class clojure.lang.PersistentList$EmptyList
 at clojure.lang.Reflector.invokeMatchingMethod (Reflector.java:53)
    clojure.lang.Reflector.invokeInstanceMethod (Reflector.java:28)
    tawny.reasoner$reasoner.invoke (reasoner.clj:162)
    tawny.reasoner$unsatisfiable.invoke (reasoner.clj:206)
    tawny.reasoner$coherent_QMARK_.invoke (reasoner.clj:212)
    tawny.upper.extent$eval1980.invoke (NO_SOURCE_FILE:4)
    clojure.lang.Compiler.eval (Compiler.java:6511)
    clojure.lang.Compiler.eval (Compiler.java:6501)
    clojure.lang.Compiler.eval (Compiler.java:6477)
    clojure.core$eval.invoke (core.clj:2797)
    clojure.main$repl$read_eval_print__6405.invoke (main.clj:245)
    clojure.main$repl$fn__6410.invoke (main.clj:266)
    clojure.main$repl.doInvoke (main.clj:266)
    clojure.lang.RestFn.invoke (RestFn.java:1096)
    clojure.tools.nrepl.middleware.interruptible_eval$evaluate$fn__544.invoke (interruptible_eval.clj:56)
    clojure.lang.AFn.applyToHelper (AFn.java:159)
    clojure.lang.AFn.applyTo (AFn.java:151)
    clojure.core$apply.invoke (core.clj:601)
    clojure.core$with_bindings_STAR_.doInvoke (core.clj:1771)
    clojure.lang.RestFn.invoke (RestFn.java:425)
    clojure.tools.nrepl.middleware.interruptible_eval$evaluate.invoke (interruptible_eval.clj:41)
    clojure.tools.nrepl.middleware.interruptible_eval$interruptible_eval$fn__585$fn__587.invoke (interruptible_eval.clj:171)
    clojure.core$comp$fn__4034.invoke (core.clj:2278)
    clojure.tools.nrepl.middleware.interruptible_eval$run_next$fn__578.invoke (interruptible_eval.clj:138)
    clojure.lang.AFn.run (AFn.java:24)
    java.util.concurrent.ThreadPoolExecutor.runWorker (ThreadPoolExecutor.java:1110)
    java.util.concurrent.ThreadPoolExecutor$Worker.run (ThreadPoolExecutor.java:603)
    java.lang.Thread.run (Thread.java:679)


* Annotation
  :PROPERTIES:
  :ARCHIVE_TIME: 2013-02-20 Wed 13:05
  :ARCHIVE_FILE: ~/src/knowledge/tawny-owl/org/todo.org
  :ARCHIVE_OLPATH: Issues
  :ARCHIVE_CATEGORY: todo
  :END:

Currently 

defannotationproperty 

doesn't work -- the code that it calls just returns the annotation property --
it doesn't actually stick it into the ontology. So need to make sure that this
happens (annotation assertion axiom I think). 

Also, we need to be able to add annotations (comments particularly!) to the
annotation. 

* AnnotationProperties can't express superproperties
  :PROPERTIES:
  :status:   closed
  :type:     feature
  :ARCHIVE_TIME: 2013-02-22 Fri 21:20
  :ARCHIVE_FILE: ~/src/knowledge/tawny-owl/org/todo.org
  :ARCHIVE_OLPATH: Issues
  :ARCHIVE_CATEGORY: todo
  :END:










* Default ontology must be set for seealso

   :PROPERTIES:
   :status:   closed
   :ARCHIVE_TIME: 2013-07-24 Wed 12:22
   :ARCHIVE_FILE: ~/src/knowledge/tawny-owl/org/todo.org
   :ARCHIVE_OLPATH: Issues
   :ARCHIVE_CATEGORY: todo
   :END: 


As a much wider problem, we sometimes require the default ontology to be set
when it is not used. Generally, this comes about because we have functions
which can take OWL API objects (in which case we don't need the ontology),
but can also take strings (in which case we need to know how to transform to
objects, which uses the ontology object). 

The current crash comes because defontfn calls default-ontology, which in
turn calls "get-current-ontology" which crashes if there isn't one. 

Solution 

get-current-ontology-or-nil

which returns nil when there is no currentonlogy -- rewrite
get-current-ontology to use. 

write new macro 

defmontfn (maybe ontology), which calls get-current-ontology or nil.

Move most functions to this. The ensure-class functions will still crash when
necessary. But seealso functions will work because they use OWL API object.



* IRI creation needs to be generalised.
   :PROPERTIES:
   :type:     feature
   :status:   closed
   :severity: medium
   :ARCHIVE_TIME: 2013-07-24 Wed 12:24
   :ARCHIVE_FILE: ~/src/knowledge/tawny-owl/org/todo.org
   :ARCHIVE_OLPATH: Issues
   :ARCHIVE_CATEGORY: todo
   :END: 
   
Have a OBO style generator. 

Initially, generate an UUID style identifer for new terms. Can use memorise to
save and to store these in a file. Add a URI gen client which will search for
these, and replace them with newly minted URIs. Have to add a purl creation
client also, which will update all purls and make sure that they point to the
correct place. 

First thing to do is to have a memorise in reverse thing which puts the IRIs
into another file.




* multiple arity version of defontfn
  :PROPERTIES:
  :ARCHIVE_TIME: 2013-07-24 Wed 12:29
  :ARCHIVE_FILE: ~/src/knowledge/tawny-owl/org/todo.org
  :ARCHIVE_OLPATH: Issues
  :ARCHIVE_CATEGORY: todo
  :END:

The defontfn can currently only cope with single artiy functions. 
It should be able to cope with more. 



* tawny doc
   :PROPERTIES:
   :type:     bug
   :ARCHIVE_TIME: 2013-07-24 Wed 12:29
   :ARCHIVE_FILE: ~/src/knowledge/tawny-owl/org/todo.org
   :ARCHIVE_OLPATH: Issues
   :ARCHIVE_CATEGORY: todo
   :END:

Doesn't cope well when the class isn't known as a var. Should fall back to 
http:// with special case for owl:thing. 




* reasoner monitor
  :PROPERTIES:
  :type:     bug
  :status:   closed
  :ARCHIVE_TIME: 2013-07-24 Wed 12:29
  :ARCHIVE_FILE: ~/src/knowledge/tawny-owl/org/todo.org
  :ARCHIVE_OLPATH: Issues
  :ARCHIVE_CATEGORY: todo
  :END:

** Issue
Something isn't working and the progress monitor isn't always getting set. 

             (SimpleConfiguration.
              (*reasoner-progress-monitor*)))]

This *should* work. Using dynamic binding? Some laziness disaster? 

Think I should extent reasoner to take this explicitly. It balks tests
completely. 

** Closed

The original issue was wrong, and this dynamic binding is working.



* add :ontology frame to all things
   :PROPERTIES:
   :type:     feature
   :severity: mild
   :ARCHIVE_TIME: 2013-07-24 Wed 12:30
   :ARCHIVE_FILE: ~/src/knowledge/tawny-owl/org/todo.org
   :ARCHIVE_OLPATH: Issues
   :ARCHIVE_CATEGORY: todo
   :END:

We should be able to specify the ontology as a parameter, to 
all things that add to an ontology -- with-ontology is a bit unwieldy. 
Although we might want to use with-ontology to implement this, or I will have
to pass it around a lot. 

A new frame would be one option. Or the first parameter would be another. 



* tawny.lookup optimisation
  :PROPERTIES:
  :type:     performance
  :status:   closed
  :ARCHIVE_TIME: 2013-07-24 Wed 12:30
  :ARCHIVE_FILE: ~/src/knowledge/tawny-owl/org/todo.org
  :ARCHIVE_OLPATH: Issues
  :ARCHIVE_CATEGORY: todo
  :END:

** Issue

This is potentially very slow. Add a cache to hold the map. 
Put hooks into tawny.old macros for "new var creation". When this 
pings, just kill the cache and start again. 

Also, kill on ontology kill I think. 


** Solution

Providing a generic cache is more of a pain than it appears, as it requires
hooks in everywhere, which potentially get called often. tawny.render was the
biggest sufferer from this, where I have fixed it by dynamically binding a
cache. 



* Clojure IDs as annotation

   :PROPERTIES:
   :type:     feature
   :severity: medium
   :scheduled_release: 0.12
   :status:   closed
   :ARCHIVE_TIME: 2013-07-24 Wed 13:47
   :ARCHIVE_FILE: ~/src/knowledge/tawny-owl/org/todo.org
   :ARCHIVE_OLPATH: Issues
   :ARCHIVE_CATEGORY: todo
   :END:

The identifiers used within clojure should be placed onto the ontology as
annotations. The idea here is that someone using clojure-owl to generate an
OWL file, should be able to read this OWL file in and recreate what they
started with (at least in terms of ids and so on). 





* r/isuperclass? returns class
  :PROPERTIES:
  :ARCHIVE_TIME: 2013-07-29 Mon 15:32
  :ARCHIVE_FILE: ~/src/knowledge/tawny-owl/org/todo.org
  :ARCHIVE_OLPATH: Issues
  :ARCHIVE_CATEGORY: todo
  :END:

Technically this is correct, but we might have expected true or false.
Probably nil is not ideal either.



* data-some not rendering proper
  :PROPERTIES:
  :ARCHIVE_TIME: 2013-08-12 Mon 14:39
  :ARCHIVE_FILE: ~/src/knowledge/tawny-owl/org/todo.org
  :ARCHIVE_OLPATH: Issues
  :ARCHIVE_CATEGORY: todo
  :END:

(data-some sio.sio/has_value :XSD_DATE_TIME)

renders as ...
(owlsome sio.sio/has_value nil)

Obviously the nil is wrong


* Added SimpleMapper support to tawny.read
  :PROPERTIES:
  :ARCHIVE_TIME: 2013-08-21 Wed 10:29
  :ARCHIVE_FILE: ~/src/knowledge/tawny-owl/org/todo.org
  :ARCHIVE_OLPATH: Issues
  :ARCHIVE_CATEGORY: todo
  :END:



* consisten function impl
  :PROPERTIES:
  :ARCHIVE_TIME: 2013-09-08 Sun 21:13
  :ARCHIVE_FILE: ~/src/knowledge/tawny-owl/org/todo.org
  :ARCHIVE_OLPATH: Issues
  :ARCHIVE_CATEGORY: todo
  :END:

owlclass-explicit and others should all use the same form, with destructuring
and the like. 

This little function would be a good thing to do...
(defn fapply [f x]
  (into {}
        (for [[k v] x]
          [k ((get f k) v)])))


Takes a map of key->function and key->data, and applies the former to the
latter. This should make things nice a declarative. 



* name corrections [13/13]
  :PROPERTIES:
  :ARCHIVE_TIME: 2013-09-10 Tue 08:34
  :ARCHIVE_FILE: ~/src/knowledge/tawny-owl/org/todo.org
  :ARCHIVE_OLPATH: Issues
  :ARCHIVE_CATEGORY: todo
  :END:

Consistent use of "-"
Including for "owl" prefix

 - [X] iriforname
 - [X] labelproperty
 - [X] owlcommentproperty
 - [X] owlcomment
etc...

 - [X] add-haskey
 - [X] add-superproperty
 - [X] objectproperty

 - [X] atmost/atleast
 - [X] disjointclasseslist
 - [X] disjointclasses

 - [X] getfact/getfactnot
 - [X] owlimport

 - [X] owlthing/nothing


* Macro naming
  :PROPERTIES:
  :ARCHIVE_TIME: 2013-09-10 Tue 08:34
  :ARCHIVE_FILE: ~/src/knowledge/tawny-owl/org/todo.org
  :ARCHIVE_OLPATH: Issues
  :ARCHIVE_CATEGORY: todo
  :END:

defannotationproperty
defoproperty
defdproperty
defclass
defdatatype



* Ontology
  :PROPERTIES:
  :ARCHIVE_TIME: 2013-09-20 Fri 11:42
  :ARCHIVE_FILE: ~/src/knowledge/tawny-owl/org/todo.org
  :ARCHIVE_OLPATH: Issues
  :ARCHIVE_CATEGORY: todo
  :END: 

This function should also use extensible handlers.


