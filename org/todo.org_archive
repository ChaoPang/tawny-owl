#    -*- mode: org -*-


Archived entries from file /home/phillord/src/knowledge/tawny-owl/src/tawny/todo.org



* Name change
  :PROPERTIES:
  :ARCHIVE_TIME: 2012-12-30 Sun 09:13
  :ARCHIVE_FILE: ~/src/knowledge/tawny-owl/src/tawny/todo.org
  :ARCHIVE_CATEGORY: todo
  :END:

Move the entire library to a new name "tawny owl". 

* Memorise/Remember
  :PROPERTIES:
  :ARCHIVE_TIME: 2013-01-08 Tue 17:05
  :ARCHIVE_FILE: ~/src/knowledge/tawny-owl/src/tawny/todo.org
  :ARCHIVE_CATEGORY: todo
  :END:

I need some functionality for remebering the mapping between IRIs and clojure
identifiers, so that if the meaningful names

(memorise)

save the current IRI to identifier mapping (including old mappings already
loaded), into a file based on the current namespace


(remember)

Load IRI mappings from a file save by memorise. This should check for IRIs
which have changed their mappings. What happens to old mapping should depend
on a dynamically bound variable. It should emit a warning at minimum, and bind
the old mapping as alias, or bind the old mapping as an alias which will crash
when used (with some suitable warning), or not bind it, in which case the
compiler will pick up any usage (but without nice warnings). 

See here -- which might be a nicer way to do the alias. Alias might want to
come in another package, as I think I might want to use this else where. 

https://github.com/technomancy/leiningen/blob/1.x/src/leiningen/core.clj#L13

* owlsome
  :PROPERTIES:
  :ARCHIVE_TIME: 2013-01-08 Tue 17:06
  :ARCHIVE_FILE: ~/src/knowledge/tawny-owl/src/tawny/todo.org
  :ARCHIVE_OLPATH: Bugs
  :ARCHIVE_CATEGORY: todo
  :END:

(owlsome hasPart)

doesn't crash -- not good -- should have arity of at least 2



* Remove the Ontology Record and use java object
  :PROPERTIES:
  :ARCHIVE_TIME: 2013-01-25 Fri 19:16
  :ARCHIVE_FILE: ~/src/knowledge/tawny-owl/src/tawny/todo.org
  :ARCHIVE_CATEGORY: todo
  :END:

The existance of an Ontology record with an ontology inside it 
is a pain in the ass for many reasons -- mostly because I have to remember the
layer of indirection. So I want to get away from this and just use the
underlying Java object

** Get prefix from ontology

(.isPrefixOWLOntologyFormat
 (.getOntologyFormat owl-ontology-manager (#'get-current-jontology)))

returns true -- so by default, we should be able to get the format. Then

public java.util.Map<java.lang.String,java.lang.String> getPrefixName2PrefixMap()

Description copied from interface: PrefixManager
Gets a map that maps prefix names to prefixes.

should let us get the prefix name (that is owl:) for prefix (that is url). The
map is backward, but such is life. 

Setting prefix is easy -- save-ontology has the code. 

** IRI

Easy to get -- from the ontology ID object which comes direct from the
Ontology object.

** Options 

Just put these damn options in! Ah well. 

Currently only used by memorise to store remembered entities. This can be 
replaced by a map, with appropriate hooks. Currently, I have this for
reasoner. This should be easy to generalise -- map from ontology to another
map. Second map can use namespaced keywords, and we can put anything we want
into it. 

Perhaps, can use this for lookup cache also. 

Maybe, a better idea here is to use the IMeta interface and extends-type
support to add metadata to ontologies. This doesn't work for the reasoner
however, as I need to be able to blitz all the reasoners when the factory
changes (which doesn't affect ontologies). 

Lookup cache is namespace based. I guess I could add this to the namespace
metadata? Although, why not the ontology? Can get the ontology from the
namespace after all. 


So, final decision. Will create a (options ontology) method in owl.clj, which
returns a hash for each and an (update-options f ontology) which applies
function f which updates. We store this in a ref. Then we hook into ontology
creation/destruction code, so that we can clear things up appropriately.

This means that ontologies have to be removed explicitly; but then they do
anyway because the ontology manager holds onto them. So only a problem if
ontologies are created with random IRIs. 

Reasoner can also be updated. This will make the task of getting all reasoners
a little harder -- we iterate through all options, get the reasoner, kill it.
But, we can do this one after the other. 


* Annotation Problems
  :PROPERTIES:
  :ARCHIVE_TIME: 2013-01-25 Fri 19:17
  :ARCHIVE_FILE: ~/src/knowledge/tawny-owl/src/tawny/todo.org
  :ARCHIVE_CATEGORY: todo
  :END:

 - [] create new add-a-annotation method which adds a single annotation.
 - [] Change add-annotation to use it.
 - [] Change add-a-annotation to multimethod keyed on class of first entity.
 - [] Add OWLNamedEntity should pass directly, rather than conversion of IRI.
 - [] Add support for OWLOntology -- need different AddOntologyAnnotation
      which we will only use in this place. 

* Ugly error when the reasoner factory has not been set.
  :PROPERTIES:
  :ARCHIVE_TIME: 2013-02-12 Tue 23:20
  :ARCHIVE_FILE: ~/src/knowledge/tawny-owl/src/tawny/todo.org
  :ARCHIVE_OLPATH: Bugs
  :ARCHIVE_CATEGORY: todo
  :END: 
java.lang.IllegalArgumentException: No matching method found: createNonBufferingReasoner for class clojure.lang.PersistentList$EmptyList
 at clojure.lang.Reflector.invokeMatchingMethod (Reflector.java:53)
    clojure.lang.Reflector.invokeInstanceMethod (Reflector.java:28)
    tawny.reasoner$reasoner.invoke (reasoner.clj:162)
    tawny.reasoner$unsatisfiable.invoke (reasoner.clj:206)
    tawny.reasoner$coherent_QMARK_.invoke (reasoner.clj:212)
    tawny.upper.extent$eval1980.invoke (NO_SOURCE_FILE:4)
    clojure.lang.Compiler.eval (Compiler.java:6511)
    clojure.lang.Compiler.eval (Compiler.java:6501)
    clojure.lang.Compiler.eval (Compiler.java:6477)
    clojure.core$eval.invoke (core.clj:2797)
    clojure.main$repl$read_eval_print__6405.invoke (main.clj:245)
    clojure.main$repl$fn__6410.invoke (main.clj:266)
    clojure.main$repl.doInvoke (main.clj:266)
    clojure.lang.RestFn.invoke (RestFn.java:1096)
    clojure.tools.nrepl.middleware.interruptible_eval$evaluate$fn__544.invoke (interruptible_eval.clj:56)
    clojure.lang.AFn.applyToHelper (AFn.java:159)
    clojure.lang.AFn.applyTo (AFn.java:151)
    clojure.core$apply.invoke (core.clj:601)
    clojure.core$with_bindings_STAR_.doInvoke (core.clj:1771)
    clojure.lang.RestFn.invoke (RestFn.java:425)
    clojure.tools.nrepl.middleware.interruptible_eval$evaluate.invoke (interruptible_eval.clj:41)
    clojure.tools.nrepl.middleware.interruptible_eval$interruptible_eval$fn__585$fn__587.invoke (interruptible_eval.clj:171)
    clojure.core$comp$fn__4034.invoke (core.clj:2278)
    clojure.tools.nrepl.middleware.interruptible_eval$run_next$fn__578.invoke (interruptible_eval.clj:138)
    clojure.lang.AFn.run (AFn.java:24)
    java.util.concurrent.ThreadPoolExecutor.runWorker (ThreadPoolExecutor.java:1110)
    java.util.concurrent.ThreadPoolExecutor$Worker.run (ThreadPoolExecutor.java:603)
    java.lang.Thread.run (Thread.java:679)


* Annotation
  :PROPERTIES:
  :ARCHIVE_TIME: 2013-02-20 Wed 13:05
  :ARCHIVE_FILE: ~/src/knowledge/tawny-owl/org/todo.org
  :ARCHIVE_OLPATH: Issues
  :ARCHIVE_CATEGORY: todo
  :END:

Currently 

defannotationproperty 

doesn't work -- the code that it calls just returns the annotation property --
it doesn't actually stick it into the ontology. So need to make sure that this
happens (annotation assertion axiom I think). 

Also, we need to be able to add annotations (comments particularly!) to the
annotation. 








